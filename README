Getting started with confgit
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

First of all, make sure you have git installed.  Then, get a copy of confgit.

    $ git clone https://github.com/dlzr/confgit.git

It's also useful to make sure confgit is in your $PATH, so either add the
confgit repo to your $PATH, or create a symlink to confgit in a directory that's
already in your $PATH.  I use ~/bin for this.


First time setup
~~~~~~~~~~~~~~~~

Go to the directory where you want your master repository to live (e.g. on a
machine that's accessible from all other machines that are going to share the
configuration).  Create the master repo:

    $ confgit init dotfiles.git

Go to your $HOME, and install the (empty) master repo there:

    $ confgit install /path/to/dotfiles.git

Normally the last piece of output of that command should tell you that there's
nothing to commit, and that the working directory is clean.  You now should
have in your home a new hidden directory (.confgit) -- that's your git
directory and a hidden file (.confgitignore) which is basically a .gitignore
file for your config files.

You can now use the usual git commands to add your config files to the
repository, the only difference being that you'll run "confgit" instead of
"git":

    $ confgit track .bashrc
    $ confgit commit -m "Adds .bashrc"
    $ confgit status
    $ confgit log

When you're done adding your files, you can push the changes to the master repo:

    $ confgit push

Congratulations!  Your config files are now in source control.


New machine setup
~~~~~~~~~~~~~~~~~

When you get a new machine, and you want to set it up with your config files,
you just need to make sure it has git installed, and you need a copy of confgit
(just as in the initial setup above).

You then just install your config files, as you did in the initial setup above:

    $ confgit install ssh://path/to/dotfiles.git

If the master repo isn't the initial empty one, chances are that at least some
of the config files you're trying to install already exist on this machine.
For instance, most distros set up some basic .bashrc file when creating a new
user.  If that happens, 'confgit install' won't overwrite the existing config
files.  Instead, if you run:

    $ confgit status

you'll see that the local files appear as local modifications on top of the
versions from the master repository.  Just like with any local modifications,
you can either reject them and keep the version from your repository (which is
what you'll want most of the times) with:

    $ confgit reset --hard HEAD

or you can edit the files, keeping whatever changes you like, and then submit
them with:

    $ confgit commit -a
    $ confgit push

Whenever you've pushed new versions of the config files to the master
repository from a different machine, you can pull the files to the current
machine with:

    $ confgit pull


Ongoing config updates
~~~~~~~~~~~~~~~~~~~~~~

After the initial setup, if you want to modify a config file, you first need to
make sure you're using the latest version of the configs (this might not be the
case if you updated the master branch from a different machine):

    $ confgit remote show origin

If that says "local out of date", you need to pull the latest updates:

    $ confgit pull

You're now ready to make your changes.  If the files you're touching are already
tracked by confgit (i.e., they're listed in .confgitignore) just modify them.
If they're new files, you have to add them to the repo:

    $ confgit track .my-new-dotfile

You'll see .confgitignore get updated to mention your new file.  If you're
dealing with directories, or if you're trying weird tricks like "track this file
from this directory but not the rest" you may need to massage .confgitignore
manually until `confgit status` shows a satisfactory diff.

Once you're happy with the diff, just commit as usual:

    $ confgit commit -a

and push to the central repo:

    $ confgit push

You should now go to your other machines and pull the updates, but you can
always do that later, when you notice the machines don't yet have the updates.


Advanced usage: per-machine branches
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The above workflow works if you have relatively homogenuous machines and you
want the same configs on all of them.  But if you have config chunks that only
need to be on some machines, you can create a git branch for each machine and
integrate patches between them as needed.

In my setup, the master branch contains the basic configuration I want on all
machines, and the machine-specific branch contains only a few diffs on top of
that.  When making changes, I first decide whether this particular change should
be propagated to all machines, and if that's the case, I checkout the master
branch, do the change there, and then merge the master branch into the machine
branch.

But confgit is really git, so you can use whatever workflow works for you.

Have fun!
